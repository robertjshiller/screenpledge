// lib/features/dashboard/presentation/views/dashboard_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:screenpledge/core/common_widgets/bottom_nav_bar.dart';
import 'package:screenpledge/core/config/theme/app_colors.dart';
// ✅ NEW: Import workmanager to manually trigger the task.
import 'package:workmanager/workmanager.dart';
// ✅ NEW: Import the background task handler to get the task name.
import 'package:screenpledge/core/services/background_task_handler.dart';
import 'package:screenpledge/features/dashboard/presentation/viewmodels/dashboard_viewmodel.dart';
import 'package:screenpledge/features/dashboard/presentation/widgets/active_goal_view.dart';
import 'package:screenpledge/features/dashboard/presentation/widgets/goal_pending_view.dart';
import 'package:screenpledge/features/dashboard/presentation/widgets/no_goal_view.dart';
import 'package:screenpledge/features/dashboard/presentation/widgets/result_overlay_banner.dart';

/// The main Dashboard page.
class DashboardPage extends ConsumerWidget {
  const DashboardPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final dashboardStateAsync = ref.watch(dashboardProvider);
    final profile = dashboardStateAsync.value?.profile;
    final textTheme = Theme.of(context).textTheme;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Hi, ${profile?.displayName ?? 'Friend'}!',
          style: textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.only(right: 16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                const Icon(Icons.star, color: Colors.amber),
                const SizedBox(width: 8),
                Text(
                  '${profile?.pledgePoints ?? 0} PP',
                  style: textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
                ),
              ],
            ),
          ),
        ],
        automaticallyImplyLeading: false,
      ),
      body: RefreshIndicator(
        onRefresh: () => ref.read(dashboardProvider.notifier).refreshDashboard(),
        child: dashboardStateAsync.when(
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (error, stackTrace) => Center(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text('An error occurred: $error'),
            ),
          ),
          data: (dashboardState) {
            return Stack(
              children: [
                _buildDashboardBody(dashboardState),
                if (dashboardState.previousDayResult != null)
                  ResultOverlayBanner(result: dashboardState.previousDayResult!),
              ],
            );
          },
        ),
      ),
      bottomNavigationBar: BottomNavBar(
        currentIndex: 0,
        onTap: (index) {
          debugPrint('Bottom nav tapped, index: $index');
        },
      ),
      // ✅ NEW: A temporary FloatingActionButton for diagnostics.
      // This button will allow us to manually trigger the background task on demand.
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Show a snackbar to confirm the button was pressed.
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Forcing warning task to run now...')),
          );
          print("--- DEBUG: Manually triggering warningNotificationTask ---");
          // Use workmanager to register a one-off task that runs immediately.
          Workmanager().registerOneOffTask(
            "manualWarningTask-${DateTime.now().millisecondsSinceEpoch}", // A unique name for this specific trigger.
            warningNotificationTask, // The name of the task we want to run.
            initialDelay: Duration.zero, // Run immediately.
            existingWorkPolicy: ExistingWorkPolicy.replace,
            constraints: Constraints(networkType: NetworkType.notRequired),
          );
        },
        backgroundColor: Colors.red,
        child: const Icon(Icons.bug_report),
      ),
    );
  }

  /// A helper method to determine which main dashboard view to show.
  Widget _buildDashboardBody(DashboardState state) {
    if (state.isGoalPending) {
      return GoalPendingView(goal: state.activeGoal!);
    } else if (state.activeGoal != null) {
      return ActiveGoalView(dashboardState: state);
    } else {
      return const NoGoalView();
    }
  }
}